<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hetaoo&#39;s Blog</title>
  <subtitle>简单，美好，奋发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hetaoo.cn/"/>
  <updated>2017-10-18T12:03:07.495Z</updated>
  <id>http://www.hetaoo.cn/</id>
  
  <author>
    <name>Hetaoo</name>
    <email>i@hetaoo.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Iterator的remove方法可保证从原集合中安全地删除对象</title>
    <link href="http://www.hetaoo.cn/2017/10/18/iteratorRemove/"/>
    <id>http://www.hetaoo.cn/2017/10/18/iteratorRemove/</id>
    <published>2017-10-18T11:40:36.000Z</published>
    <updated>2017-10-18T12:03:07.495Z</updated>
    
    <content type="html"><![CDATA[<p>如果对正在被迭代的集合进行结构上的改变（即对该集合使用add、remove或clear方法），那么迭代器就不再合法（并且在其后使用该迭代器将会有ConcurrentModificationException异常被抛出）。</p>
<p>如果使用迭代器自己的remove方法，那么这个迭代器就仍然是合法的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;));</div><div class="line">for(String s:list)&#123;</div><div class="line">    if(s.equals(&quot;a&quot;))&#123;</div><div class="line">        list.remove(s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它会抛出一个ConcurrentModificationException异常。 相反下面的显示正常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;));</div><div class="line">Iterator&lt;String&gt; iter = list.iterator();</div><div class="line">while(iter.hasNext())&#123;</div><div class="line">        String s = iter.next();</div><div class="line">        if(s.equals(&quot;a&quot;))&#123;</div><div class="line">            iter.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>.next()必须在.remove()之前调用。在一个foreach循环中，编译器会使.next()在删除元素之后被调用，因此就会抛出ConcurrentModificationException异常，你也许希望看一下ArrayList.iterator()的源代码。<br><a href="http://www.cnblogs.com/softidea/p/4279574.html" target="_blank" rel="external">http://www.cnblogs.com/softidea/p/4279574.html</a></p>
<p>Iterator 支持从源集合中安全地删除对象，只需在 Iterator 上调用 remove() 即可。这样做的好处是可以避免ConcurrentModifiedException ，这个异常顾名思意：当打开 Iterator 迭代集合时，同时又在对集合进行修改。有些集合不允许在迭代时删除或添加元素，但是调用 Iterator 的remove() 方法是个安全的做法。</p>
<p>ArrayList 简选两段源码</p>
<ul>
<li><p>内部类，这个类实现了iterator接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">private class Itr implements Iterator&lt;E&gt; &#123;</div><div class="line">        int cursor;       // index of next element to return</div><div class="line">        int lastRet = -1; // index of last element returned; -1 if no such</div><div class="line">        int expectedModCount = modCount;</div><div class="line"></div><div class="line">        public boolean hasNext() &#123;</div><div class="line">            return cursor != size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">        public E next() &#123;</div><div class="line">            checkForComodification();</div><div class="line">            int i = cursor;</div><div class="line">            if (i &gt;= size)</div><div class="line">                throw new NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.this.elementData;</div><div class="line">            if (i &gt;= elementData.length)</div><div class="line">                throw new ConcurrentModificationException();</div><div class="line">            cursor = i + 1;</div><div class="line">            return (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void remove() &#123;</div><div class="line">            if (lastRet &lt; 0)</div><div class="line">                throw new IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                ArrayList.this.remove(lastRet);</div><div class="line">                cursor = lastRet;</div><div class="line">                lastRet = -1;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</div><div class="line">                throw new ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ArrayList 本身remove方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public E remove(int index) &#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        E oldValue = elementData(index);</div><div class="line"></div><div class="line">        int numMoved = size - index - 1;</div><div class="line">        if (numMoved &gt; 0)</div><div class="line">            System.arraycopy(elementData, index+1, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = null; // clear to let GC do its work</div><div class="line"></div><div class="line">        return oldValue;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在内部类Itr中，有一个字段expectedModCount ，初始化时等于modCount，即当我们调用list.iterator()返回迭代器时，该字段被初始化为等于modCount。在类Itr中next/remove方法都有调用checkForComodification()方法，在该方法中检测modCount == expectedModCount，如果不相当则抛出异常ConcurrentModificationException。</p>
<p>使用集合的修改操作(add/remove)中，都对modCount进行了+1。<br>在看看刚开始提出的那段代码，在迭代过程中，执行list.remove(val)，使得modCount+1，当下一次循环时，执行 it.next()，checkForComodification方法发现modCount != expectedModCount，则抛出异常。</p>
<p>再来看看内部类Itr的remove()方法，在删除元素后，有这么一句expectedModCount = modCount，同步修改expectedModCount 的值。所以，如果需要在使用迭代器迭代时，删除元素，可以使用迭代器提供的remove方法。对于add操作，则在整个迭代器迭代过程中是不允许的。 其他集合(Map/Set)使用迭代器迭代也是一样。</p>
<blockquote><p>勿以事小而不为。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果对正在被迭代的集合进行结构上的改变（即对该集合使用add、remove或clear方法），那么迭代器就不再合法（并且在其后使用该迭代器将会有ConcurrentModificationException异常被抛出）。&lt;/p&gt;
&lt;p&gt;如果使用迭代器自己的remove方法，
    
    </summary>
    
      <category term="java" scheme="http://www.hetaoo.cn/categories/java/"/>
    
    
      <category term="iterator" scheme="http://www.hetaoo.cn/tags/iterator/"/>
    
      <category term="remove" scheme="http://www.hetaoo.cn/tags/remove/"/>
    
      <category term="ConcurrentModificationException" scheme="http://www.hetaoo.cn/tags/ConcurrentModificationException/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成pagehelp分页插件</title>
    <link href="http://www.hetaoo.cn/2017/10/13/springbootPageHelpPlugin/"/>
    <id>http://www.hetaoo.cn/2017/10/13/springbootPageHelpPlugin/</id>
    <published>2017-10-13T04:14:01.000Z</published>
    <updated>2017-10-13T07:20:54.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引入starter"><a href="#引入starter" class="headerlink" title="引入starter"></a>引入starter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="添加配置-application-yml"><a href="#添加配置-application-yml" class="headerlink" title="添加配置 application.yml"></a>添加配置 application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pagehelper:</div><div class="line">  helperDialect: mysql</div><div class="line">  reasonable: true</div><div class="line">  supportMethodsArguments: true</div><div class="line">  params: count=countSql</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>只需在实现类中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PageHelper.startPage(pageNo, pageSize);</div></pre></td></tr></table></figure></p>
<h3 id="附pageHelp配置"><a href="#附pageHelp配置" class="headerlink" title="附pageHelp配置"></a>附pageHelp配置</h3><ul>
<li>helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值：oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby <strong> 特别注意：</strong> 使用 SqlServer2012 数据库时，需要手动指定为 sqlserver2012，否则会使用 SqlServer2005 的方式进行分页。你也可以实现 AbstractHelperDialect，然后配置该属性为实现类的全限定名称即可使用自定义的实现方法。</li>
<li>offsetAsPageNum：默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页。</li>
<li>rowBoundsWithCount：默认值为false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为true时，使用 RowBounds 分页会进行 count 查询。</li>
<li>pageSizeZero：默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。</li>
<li>reasonable：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页，pageNum&gt;pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。</li>
<li>params：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。</li>
<li>supportMethodsArguments：支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。 使用方法可以参考测试代码中的 com.github.pagehelper.test.basic 包下的 ArgumentsMapTest 和 ArgumentsObjTest。</li>
<li>autoRuntimeDialect：默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页 （不支持自动选择sqlserver2012，只能使用sqlserver）。</li>
<li>closeConn：默认值为 true。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引入starter&quot;&gt;&lt;a href=&quot;#引入starter&quot; class=&quot;headerlink&quot; title=&quot;引入starter&quot;&gt;&lt;/a&gt;引入starter&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="springboot" scheme="http://www.hetaoo.cn/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.hetaoo.cn/tags/springboot/"/>
    
      <category term="pagehelp" scheme="http://www.hetaoo.cn/tags/pagehelp/"/>
    
      <category term="plugin" scheme="http://www.hetaoo.cn/tags/plugin/"/>
    
      <category term="分页" scheme="http://www.hetaoo.cn/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>简单的验证码识别</title>
    <link href="http://www.hetaoo.cn/2017/05/16/OcrVerificationCode/"/>
    <id>http://www.hetaoo.cn/2017/05/16/OcrVerificationCode/</id>
    <published>2017-05-16T11:25:56.000Z</published>
    <updated>2017-05-16T12:33:41.031Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一幅图像可以定义为一个二维数组f(x,y)，这里x，y是空间坐标，而在任何一对空间坐标(x,y)上的幅值f称为该点图像的强度或灰度。当x，y和幅值f为有限的、离散的数值时，称该图像为数字图像。</p>
</blockquote>
<h2 id="图像预处理"><a href="#图像预处理" class="headerlink" title="图像预处理"></a>图像预处理</h2><p>   主要是对图像进行取字模、灰度化、二值化、去除干扰线。</p>
<ul>
<li><p><strong>取字模：</strong> 取字模时，我们需要多下载几张图片，使这些图片中，包括所有的字符</p>
<img src="/2017/05/16/OcrVerificationCode/字模.jpg" alt="字模 image" title="字模 image">    
</li>
<li><p><strong>对图片特点进行分析：</strong> 找出规律</p>
<img src="/2017/05/16/OcrVerificationCode/分析图像.png" alt="分析图像 image" title="分析图像 image">    
</li>
<li><p><strong>灰度化：</strong> 遍历图像的像素点，根据图片的x,y位置确定像素点，获取该点的RGB值，分析该点的红、绿、蓝值，设个阈值处理，将图片灰度化</p>
<img src="/2017/05/16/OcrVerificationCode/灰度化.jpg" alt="灰度化 image" title="灰度化 image">    
</li>
<li><p><strong>二值化：</strong> 把灰度化后的灰度级减少到1位2个灰度级，就得到一副二值图，二值图像中的数据全部是0或1</p>
<img src="/2017/05/16/OcrVerificationCode/二值化.jpg" alt="二值化 image" title="二值化 image">    
</li>
<li><p><strong>去除干扰线：</strong>  获取每个像素点的周围8个像素值，如果周围大于3个点是黑点（根据实际情况设定），就把它设为白点，其它全设为黑点  就得到上图</p>
<img src="/2017/05/16/OcrVerificationCode/去除干扰线.jpg" alt="去除干扰线 image" title="去除干扰线 image">    
</li>
</ul>
<h2 id="字符切割"><a href="#字符切割" class="headerlink" title="字符切割"></a>字符切割</h2><p>  根据找出的规律对图片进行切割，如果没有规律可以根据算法切割<br>  （本人采取简单算法切割：以X轴横向扫描，计算每个Y轴白点的像素，当Y轴的白点超过一个值（根据图片自己设定），记下此时的X轴坐标为：X1，当Y轴白点继续大于设定值就继续往后扫描，当Y轴白点为0时，记下此时的X轴坐标为：X2，判断这个距离是否有一个字符的宽度，如果有就认为这是一个字符的宽度，开始纵向切割，然后再横向切割）</p>
   <img src="/2017/05/16/OcrVerificationCode/纵向切割.png" alt="纵向切割 image" title="纵向切割 image">    
<p>   纵向切割后得到的图    </p>
   <img src="/2017/05/16/OcrVerificationCode/横向切割.png" alt="横向切割 image" title="横向切割 image">    
<p>   横向切得到的图    </p>
<h2 id="训练字库"><a href="#训练字库" class="headerlink" title="训练字库"></a>训练字库</h2><p> 取去噪后的图片，以验证码内容命名，如下图：<br> <img src="/2017/05/16/OcrVerificationCode/训练字库1.jpg" alt="训练字库1 image" title="训练字库1 image">    </p>
<p> 用写好的切割代码，对图片进行切割保存并命名：    </p>
  <img src="/2017/05/16/OcrVerificationCode/训练字库2.jpg" alt="训练字库2 image" title="训练字库2 image">    
<h2 id="识别输出"><a href="#识别输出" class="headerlink" title="识别输出"></a>识别输出</h2><p>读取需要识别图片与图片库进行对比，在一定误差允许范围内，取图片库误差最小的图片，并获取图片名的第一个字符<br><img src="/2017/05/16/OcrVerificationCode/识别输出.png" alt="识别输出 image" title="识别输出 image">    </p>
<p>如上图图片在识别时被被切割4份后，拿每份与图片库图片比较，如果此时图片库2-17.jpg与其误差最小，就取2这个字符</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;一幅图像可以定义为一个二维数组f(x,y)，这里x，y是空间坐标，而在任何一对空间坐标(x,y)上的幅值f称为该点图像的强度或灰度。当x，y和幅值f为有限的、离散的数值时，称该图像为数字图像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;图像
    
    </summary>
    
      <category term="Technical articles" scheme="http://www.hetaoo.cn/categories/Technical-articles/"/>
    
    
      <category term="Verification Code" scheme="http://www.hetaoo.cn/tags/Verification-Code/"/>
    
      <category term="验证码识别" scheme="http://www.hetaoo.cn/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
      <category term="验证码" scheme="http://www.hetaoo.cn/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Pages与Hexo搭建个人博客</title>
    <link href="http://www.hetaoo.cn/2017/04/21/githubPages/"/>
    <id>http://www.hetaoo.cn/2017/04/21/githubPages/</id>
    <published>2017-04-21T09:52:51.000Z</published>
    <updated>2017-04-24T04:56:32.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>摘要：</strong> Github Pages与Hexo搭建个人博客的教程，网上一搜一大片，在这简短介绍搭建过程和自己踩得一些坑，主要是为了方便自己以后搭建，不再需要重新去找教程。</p>
</blockquote>
<h2 id="为什么选择GitHub-Pages？"><a href="#为什么选择GitHub-Pages？" class="headerlink" title="为什么选择GitHub Pages？"></a>为什么选择GitHub Pages？</h2><h3 id="很多人用wordpress，你为什么要用github-pages来搭建？"><a href="#很多人用wordpress，你为什么要用github-pages来搭建？" class="headerlink" title="很多人用wordpress，你为什么要用github pages来搭建？"></a>很多人用wordpress，你为什么要用github pages来搭建？</h3><ul>
<li>github pages有300M免费空间，资料自己管理，保存可靠</li>
<li>学着用github，享受github的便利，上面有很多大牛，眼界会开阔很多</li>
<li>经常逛github，习惯性将一些东西提交到github</li>
<li>wordpress等需要有自己的虚拟主机等</li>
</ul>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>  
</li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a>   
</li>
</ul>
<blockquote><p>配置github就不说了，有一定经验的开发人员都会配</p>
</blockquote>
<h2 id="使用GitHub-Pages建立博客"><a href="#使用GitHub-Pages建立博客" class="headerlink" title="使用GitHub Pages建立博客"></a>使用GitHub Pages建立博客</h2><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如hetaoo.github.io这样的可访问的站，每个用户名下面只能建立一个。</p>
<h3 id="github上建立仓库"><a href="#github上建立仓库" class="headerlink" title="github上建立仓库"></a>github上建立仓库</h3><p>登录后系统，在github首页，点击页面右下角「New Repository」<br><img src="/2017/04/21/githubPages/hetaoo.github.io.jpg" alt="hetaoo.github.io image" title="hetaoo.github.io image"><br>点击「Create Repository」 完成创建。<br>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：<br><img src="/2017/04/21/githubPages/githubPages.jpg" alt="githubPages image" title="githubPages image"><br>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。–我的是已经配置好了的。</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g   </div><div class="line">npm install hexo --save</div><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<h3 id="hexo的相关配置"><a href="#hexo的相关配置" class="headerlink" title="hexo的相关配置"></a>hexo的相关配置</h3><p>接着上面的操作，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init  </div><div class="line">npm install</div></pre></td></tr></table></figure><br>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。   </p>
<h4 id="首次体验Hexo"><a href="#首次体验Hexo" class="headerlink" title="首次体验Hexo"></a>首次体验Hexo</h4><p>继续操作，同样是在命令行中，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure><br>在浏览器中打开<a href="http://localhost:4000/，你将会看到预览效果。" target="_blank" rel="external">http://localhost:4000/，你将会看到预览效果。</a></p>
<h2 id="怎样将Hexo与github-page-联系起来"><a href="#怎样将Hexo与github-page-联系起来" class="headerlink" title="怎样将Hexo与github page 联系起来"></a>怎样将Hexo与github page 联系起来</h2><p>大概分为以下几步：</p>
<ul>
<li>配置git个人信息</li>
<li>配置Deployment</li>
</ul>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><p>如果你之前已经配置好git个人信息，请跳过这一个 步骤，直接来到</p>
<ol>
<li>设置Git的user name和email：(如果是第一次的话)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;hetaoo&quot;</div><div class="line">git config --global user.email &quot;i@hetaoo.cn&quot;</div></pre></td></tr></table></figure></li>
<li>生成密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;i@hetaoo.cn&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><p>同样在_config.yml文件中，找到Deployment，然后按照如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p><strong>踩坑提醒：</strong></p>
<ul>
<li>注意需要提前安装一个扩展：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
如果没有执行者行命令，将会提醒<blockquote><p>deloyer not found:git</p>
</blockquote></li>
<li>如果出现下面这样的错误<blockquote><p>Permission denied (publickey).<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights<br>and the repository exists.</p>
</blockquote>
则是因为没有设置好public key所致。</li>
</ul>
<h2 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h2><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。有两个比较好的主题推荐给大家。</p>
<ul>
<li>Yilia</li>
<li>NexT</li>
</ul>
<p>具体配置就不写了，很简单。</p>
<h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><p>添加sitemap和feed插件<br>切换到你本地的hexo 目录，在命令行窗口，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed -save</div><div class="line">npm install hexo-generator-sitemap -save</div></pre></td></tr></table></figure><br>修改_config.yml，增加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">Plugins:</div><div class="line">  - hexo-generator-feed</div><div class="line">  - hexo-generator-sitemap</div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">#sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div></pre></td></tr></table></figure><br>再执行以下命令，部署服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<h2 id="添加404-页面"><a href="#添加404-页面" class="headerlink" title="添加404 页面"></a>添加404 页面</h2><p>GitHub Pages有提供制作404页面的指引：<a href="https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/" target="_blank" rel="external">Custom 404 Pages</a><br>直接在根目录下创建自己的404.html或者404.md就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p>
<p>推荐使用<a href="http://www.qq.com/404/" target="_blank" rel="external">腾讯公益404</a></p>
<p>我的404页面配置如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span></span></div><div class="line">      <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></div><div class="line">      <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;<span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><ul>
<li>在你的source目录下新建CNAME文件，内容写你的域名</li>
<li>在你的域名cdn解析中添加cname解析，指向hetaoo.github.io</li>
<li>也可添加A解析，ip地址为  </li>
</ul>
<img src="/2017/04/21/githubPages/ip.jpg" alt="ip image" title="ip image">  
<h2 id="国内加速"><a href="#国内加速" class="headerlink" title="国内加速"></a>国内加速</h2><ul>
<li>开通对象储存oss</li>
<li>开通cdn</li>
</ul>
<h3 id="oss"><a href="#oss" class="headerlink" title="oss"></a>oss</h3><p>新建Bucket<br><img src="/2017/04/21/githubPages/oss.jpg" alt="oss image" title="oss image">  </p>
<ul>
<li>储存内容为：低频访问</li>
<li>读写权限为公共度</li>
</ul>
<h4 id="oss配置"><a href="#oss配置" class="headerlink" title="oss配置"></a>oss配置</h4><ul>
<li>默认首页为：index.html</li>
<li>回源规则设置为：镜像–&gt;回源地址：hetaoo.github.io</li>
</ul>
<h3 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h3><ul>
<li><p>添加加速域名   </p>
<img src="/2017/04/21/githubPages/createCDN.jpg" alt="createCDN image" title="createCDN image">
</li>
<li><p>添加cname解析才会生效   </p>
<img src="/2017/04/21/githubPages/cname.jpg" alt="cname image" title="cname image">
</li>
</ul>
<h2 id="最后附上我的-config-yml"><a href="#最后附上我的-config-yml" class="headerlink" title="最后附上我的_config.yml"></a>最后附上我的_config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: Hetaoo&apos;s Blog</div><div class="line">subtitle: 简单，美好，奋发</div><div class="line">description: 一个简单喜欢编程的程序员</div><div class="line">author:  Hetaoo</div><div class="line">email: i@hetaoo.cn</div><div class="line">keywords: &quot;后端,java,开发者,程序员,程序猿,程序媛,极客,编程,代码,开源,IT网站,Developer,Programmer,Coder&quot;</div><div class="line">language: zh-CN</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://www.hetaoo.cn</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: true</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 8</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Archives</div><div class="line">## 2: Enable pagination</div><div class="line">## 1: Disable pagination</div><div class="line">## 0: Fully Disable</div><div class="line">archive: 1</div><div class="line">category: 1</div><div class="line">tag: 1</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">plugins: hexo-generator-feed</div><div class="line"></div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: hexo-theme-yilia.git</div><div class="line"></div><div class="line"># Disqus #社会化评论disqus，我使用多说，在主题中配置</div><div class="line">disqus_shortname:</div><div class="line"></div><div class="line">sitemap:</div><div class="line">    path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">    path: baidusitemap.xm</div><div class="line"></div><div class="line">feed:</div><div class="line">    type: atom</div><div class="line">    path: atom.xml</div><div class="line">    limit: 100</div><div class="line"></div><div class="line"># Markdown</div><div class="line">## https://github.com/chjj/marked</div><div class="line">markdown:</div><div class="line">  gfm: true</div><div class="line">  pedantic: false</div><div class="line">  sanitize: false</div><div class="line">  tables: true</div><div class="line">  breaks: true</div><div class="line">  smartLists: true</div><div class="line">  smartypants: true</div><div class="line"></div><div class="line"># Stylus</div><div class="line">stylus:</div><div class="line">  compress: false</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:git</div><div class="line">  branch:master</div><div class="line">  repo:https://github.com/hetaoo/hetaoo.github.io.git</div><div class="line"></div><div class="line">jsonContent:</div><div class="line">    meta: false</div><div class="line">    pages: false</div><div class="line">    posts:</div><div class="line">      title: true</div><div class="line">      date: true</div><div class="line">      path: true</div><div class="line">      text: true</div><div class="line">      raw: false</div><div class="line">      content: false</div><div class="line">      slug: false</div><div class="line">      updated: false</div><div class="line">      comments: false</div><div class="line">      link: false</div><div class="line">      permalink: false</div><div class="line">      excerpt: false</div><div class="line">      categories: false</div><div class="line">      tags: true</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; Github Pages与Hexo搭建个人博客的教程，网上一搜一大片，在这简短介绍搭建过程和自己踩得一些坑，主要是为了方便自己以后搭建，不再需要重新去找教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id
    
    </summary>
    
      <category term="tools" scheme="http://www.hetaoo.cn/categories/tools/"/>
    
    
      <category term="github" scheme="http://www.hetaoo.cn/tags/github/"/>
    
      <category term="hexo" scheme="http://www.hetaoo.cn/tags/hexo/"/>
    
      <category term="blog" scheme="http://www.hetaoo.cn/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="http://www.hetaoo.cn/2017/04/21/newStart/"/>
    <id>http://www.hetaoo.cn/2017/04/21/newStart/</id>
    <published>2017-04-21T04:35:59.000Z</published>
    <updated>2017-04-21T09:41:51.645Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/04/21/newStart/timg.jpg" alt="Sunup image" title="Sunup image">    
<blockquote><p>“ 昨天下了雨，今天刮了风，明天太阳就出来了。”</p>
</blockquote>
<h2 id="为什么突然要写博客"><a href="#为什么突然要写博客" class="headerlink" title="为什么突然要写博客"></a>为什么突然要写博客</h2><ul>
<li>能够交到一些志同道合的朋友</li>
<li>记录一下思路和细节，避免长期之后记忆错误</li>
<li>提高将事情讲清楚的能力</li>
<li>激励自己去持续学习和思考</li>
<li>学会持之以恒地做一件事情</li>
<li>记录成长</li>
</ul>
<h2 id="总结过去的一年"><a href="#总结过去的一年" class="headerlink" title="总结过去的一年"></a>总结过去的一年</h2><p>  工作差不多了一年了，回想自己这一年的时间里，自己的成长稍微有点慢，于是反思总结、和身边人比较，发现自己的缺点很明显：</p>
<ul>
<li>刚工作不知道技术链这么长，方向不明确</li>
<li>基础不扎实</li>
<li>平常工作忙，没有很好的利用空闲时间学习</li>
<li>没有经常混开发社区，获取最新技术有点落后</li>
</ul>
<h2 id="未来要怎么做"><a href="#未来要怎么做" class="headerlink" title="未来要怎么做"></a>未来要怎么做</h2><p>  识迷途其未远，觉今是而昨非。保持持续学习是程序员必备的素质，自己也想在IT这条路上越走越走越远，有所成就，获得一种成就感，毕竟每一个程序员都有一个大牛梦。</p>
<ul>
<li>养成一个良好的习惯<ol>
<li>工作中：善于总结、善于思考</li>
<li>生活上：坚持锻炼，早睡早起</li>
</ol>
</li>
<li>巩固基础知识，再忙每天都要抽时间学习||写代码||写博客</li>
<li>空闲时间浏览开发社区信息，了解最新技术动态</li>
<li>学习拍照技术，将女朋友拍的美美的</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/04/21/newStart/timg.jpg&quot; alt=&quot;Sunup image&quot; title=&quot;Sunup image&quot;&gt;    
&lt;blockquote&gt;&lt;p&gt;“ 昨天下了雨，今天刮了风，明天太阳就出来了。”&lt;/p&gt;
&lt;/blockquote
    
    </summary>
    
      <category term="杂谈" scheme="http://www.hetaoo.cn/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="开篇" scheme="http://www.hetaoo.cn/tags/%E5%BC%80%E7%AF%87/"/>
    
  </entry>
  
</feed>
