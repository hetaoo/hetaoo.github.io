[{"title":"springboot集成pagehelp分页插件","date":"2017-10-13T04:14:01.000Z","path":"2017/10/13/springbootPageHelpPlugin/","text":"引入starter1234&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt; 添加配置 application.yml12345pagehelper: helperDialect: mysql reasonable: true supportMethodsArguments: true params: count=countSql 使用只需在实现类中写入1PageHelper.startPage(pageNo, pageSize); 附pageHelp配置 helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值：oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby 特别注意： 使用 SqlServer2012 数据库时，需要手动指定为 sqlserver2012，否则会使用 SqlServer2005 的方式进行分页。你也可以实现 AbstractHelperDialect，然后配置该属性为实现类的全限定名称即可使用自定义的实现方法。 offsetAsPageNum：默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页。 rowBoundsWithCount：默认值为false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为true时，使用 RowBounds 分页会进行 count 查询。 pageSizeZero：默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。 reasonable：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页，pageNum&gt;pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。 params：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。 supportMethodsArguments：支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。 使用方法可以参考测试代码中的 com.github.pagehelper.test.basic 包下的 ArgumentsMapTest 和 ArgumentsObjTest。 autoRuntimeDialect：默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页 （不支持自动选择sqlserver2012，只能使用sqlserver）。 closeConn：默认值为 true。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定","tags":[{"name":"springboot,pagehelp,plugin，分页","slug":"springboot-pagehelp-plugin，分页","permalink":"http://www.hetaoo.cn/tags/springboot-pagehelp-plugin，分页/"}]},{"title":"简单的验证码识别","date":"2017-05-16T11:25:56.000Z","path":"2017/05/16/OcrVerificationCode/","text":"一幅图像可以定义为一个二维数组f(x,y)，这里x，y是空间坐标，而在任何一对空间坐标(x,y)上的幅值f称为该点图像的强度或灰度。当x，y和幅值f为有限的、离散的数值时，称该图像为数字图像。 图像预处理 主要是对图像进行取字模、灰度化、二值化、去除干扰线。 取字模： 取字模时，我们需要多下载几张图片，使这些图片中，包括所有的字符 对图片特点进行分析： 找出规律 灰度化： 遍历图像的像素点，根据图片的x,y位置确定像素点，获取该点的RGB值，分析该点的红、绿、蓝值，设个阈值处理，将图片灰度化 二值化： 把灰度化后的灰度级减少到1位2个灰度级，就得到一副二值图，二值图像中的数据全部是0或1 去除干扰线： 获取每个像素点的周围8个像素值，如果周围大于3个点是黑点（根据实际情况设定），就把它设为白点，其它全设为黑点 就得到上图 字符切割 根据找出的规律对图片进行切割，如果没有规律可以根据算法切割 （本人采取简单算法切割：以X轴横向扫描，计算每个Y轴白点的像素，当Y轴的白点超过一个值（根据图片自己设定），记下此时的X轴坐标为：X1，当Y轴白点继续大于设定值就继续往后扫描，当Y轴白点为0时，记下此时的X轴坐标为：X2，判断这个距离是否有一个字符的宽度，如果有就认为这是一个字符的宽度，开始纵向切割，然后再横向切割） 纵向切割后得到的图 横向切得到的图 训练字库 取去噪后的图片，以验证码内容命名，如下图： 用写好的切割代码，对图片进行切割保存并命名： 识别输出读取需要识别图片与图片库进行对比，在一定误差允许范围内，取图片库误差最小的图片，并获取图片名的第一个字符 如上图图片在识别时被被切割4份后，拿每份与图片库图片比较，如果此时图片库2-17.jpg与其误差最小，就取2这个字符","tags":[{"name":"Verification Code","slug":"Verification-Code","permalink":"http://www.hetaoo.cn/tags/Verification-Code/"},{"name":"验证码识别","slug":"验证码识别","permalink":"http://www.hetaoo.cn/tags/验证码识别/"},{"name":"验证码","slug":"验证码","permalink":"http://www.hetaoo.cn/tags/验证码/"}]},{"title":"Pages与Hexo搭建个人博客","date":"2017-04-21T09:52:51.000Z","path":"2017/04/21/githubPages/","text":"摘要： Github Pages与Hexo搭建个人博客的教程，网上一搜一大片，在这简短介绍搭建过程和自己踩得一些坑，主要是为了方便自己以后搭建，不再需要重新去找教程。 为什么选择GitHub Pages？很多人用wordpress，你为什么要用github pages来搭建？ github pages有300M免费空间，资料自己管理，保存可靠 学着用github，享受github的便利，上面有很多大牛，眼界会开阔很多 经常逛github，习惯性将一些东西提交到github wordpress等需要有自己的虚拟主机等 安装软件 Node.js Git 配置github就不说了，有一定经验的开发人员都会配 使用GitHub Pages建立博客与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。想建立个人博客是用的第一种，形如hetaoo.github.io这样的可访问的站，每个用户名下面只能建立一个。 github上建立仓库登录后系统，在github首页，点击页面右下角「New Repository」点击「Create Repository」 完成创建。接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。–我的是已经配置好了的。 安装hexo在命令行中输入：123npm install hexo-cli -g npm install hexo --savehexo -v hexo的相关配置接着上面的操作，输入：12hexo init npm install之后npm将会自动安装你需要的组件，只需要等待npm操作即可。 首次体验Hexo继续操作，同样是在命令行中，输入：12hexo ghexo s在浏览器中打开http://localhost:4000/，你将会看到预览效果。 怎样将Hexo与github page 联系起来大概分为以下几步： 配置git个人信息 配置Deployment 配置Git个人信息如果你之前已经配置好git个人信息，请跳过这一个 步骤，直接来到 设置Git的user name和email：(如果是第一次的话)12git config --global user.name &quot;hetaoo&quot;git config --global user.email &quot;i@hetaoo.cn&quot; 生成密钥1ssh-keygen -t rsa -C &quot;i@hetaoo.cn&quot; 配置Deployment同样在_config.yml文件中，找到Deployment，然后按照如下修改：1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 踩坑提醒： 注意需要提前安装一个扩展：1npm install hexo-deployer-git --save 如果没有执行者行命令，将会提醒deloyer not found:git 如果出现下面这样的错误Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 则是因为没有设置好public key所致。 主题推荐每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。有两个比较好的主题推荐给大家。 Yilia NexT 具体配置就不写了，很简单。 添加插件添加sitemap和feed插件切换到你本地的hexo 目录，在命令行窗口，输入以下命令12npm install hexo-generator-feed -savenpm install hexo-generator-sitemap -save修改_config.yml，增加以下内容123456789101112# ExtensionsPlugins: - hexo-generator-feed - hexo-generator-sitemap#Feed Atomfeed: type: atom path: atom.xml limit: 20#sitemapsitemap: path: sitemap.xml再执行以下命令，部署服务端1hexo d -g 添加404 页面GitHub Pages有提供制作404页面的指引：Custom 404 Pages直接在根目录下创建自己的404.html或者404.md就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。 推荐使用腾讯公益404 我的404页面配置如下：12345678910111213141516&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt;&lt;meta name=\"robots\" content=\"all\" /&gt;&lt;meta name=\"robots\" content=\"index,follow\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 绑定个人域名 在你的source目录下新建CNAME文件，内容写你的域名 在你的域名cdn解析中添加cname解析，指向hetaoo.github.io 也可添加A解析，ip地址为 国内加速 开通对象储存oss 开通cdn oss新建Bucket 储存内容为：低频访问 读写权限为公共度 oss配置 默认首页为：index.html 回源规则设置为：镜像–&gt;回源地址：hetaoo.github.io cdn 添加加速域名 添加cname解析才会生效 最后附上我的_config.yml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Hetaoo&apos;s Blogsubtitle: 简单，美好，奋发description: 一个简单喜欢编程的程序员author: Hetaooemail: i@hetaoo.cnkeywords: &quot;后端,java,开发者,程序员,程序猿,程序媛,极客,编程,代码,开源,IT网站,Developer,Programmer,Coder&quot;language: zh-CN# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://www.hetaoo.cnroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 8pagination_dir: page# Archives## 2: Enable pagination## 1: Disable pagination## 0: Fully Disablearchive: 1category: 1tag: 1# Extensions## Plugins: https://hexo.io/plugins/plugins: hexo-generator-feed## Themes: https://hexo.io/themes/theme: hexo-theme-yilia.git# Disqus #社会化评论disqus，我使用多说，在主题中配置disqus_shortname:sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xmfeed: type: atom path: atom.xml limit: 100# Markdown## https://github.com/chjj/markedmarkdown: gfm: true pedantic: false sanitize: false tables: true breaks: true smartLists: true smartypants: true# Stylusstylus: compress: false# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type:git branch:master repo:https://github.com/hetaoo/hetaoo.github.io.gitjsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true","tags":[{"name":"github","slug":"github","permalink":"http://www.hetaoo.cn/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://www.hetaoo.cn/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://www.hetaoo.cn/tags/blog/"}]},{"title":"开篇","date":"2017-04-21T04:35:59.000Z","path":"2017/04/21/newStart/","text":"“ 昨天下了雨，今天刮了风，明天太阳就出来了。” 为什么突然要写博客 能够交到一些志同道合的朋友 记录一下思路和细节，避免长期之后记忆错误 提高将事情讲清楚的能力 激励自己去持续学习和思考 学会持之以恒地做一件事情 记录成长 总结过去的一年 工作差不多了一年了，回想自己这一年的时间里，自己的成长稍微有点慢，于是反思总结、和身边人比较，发现自己的缺点很明显： 刚工作不知道技术链这么长，方向不明确 基础不扎实 平常工作忙，没有很好的利用空闲时间学习 没有经常混开发社区，获取最新技术有点落后 未来要怎么做 识迷途其未远，觉今是而昨非。保持持续学习是程序员必备的素质，自己也想在IT这条路上越走越走越远，有所成就，获得一种成就感，毕竟每一个程序员都有一个大牛梦。 养成一个良好的习惯 工作中：善于总结、善于思考 生活上：坚持锻炼，早睡早起 巩固基础知识，再忙每天都要抽时间学习||写代码||写博客 空闲时间浏览开发社区信息，了解最新技术动态 学习拍照技术，将女朋友拍的美美的","tags":[{"name":"开篇","slug":"开篇","permalink":"http://www.hetaoo.cn/tags/开篇/"}]}]